---
import faviconSrc from "@images/favicon.svg";
import ogpImageSrc from "@images/ogp.webp";
import { getImage } from "astro:assets";

interface Object {
  [key: string]: string;
}

const siteUrl: string = "https://ht-code.jp";
const siteName: string = "ht-CODE（エイチティコード） | 千葉県浦安市を拠点に活動するWebクリエイターです";
const favicon = {
  default: await getImage({ src: faviconSrc, width: 32, format: "svg" }),
  large: await getImage({ src: faviconSrc, width: 192, format: "svg" }),
  apple: await getImage({ src: faviconSrc, width: 160, format: "svg" }),
};
const ogpImage = await getImage({ src: ogpImageSrc, width: 1200, format: "webp" });

interface Props {
  title: string;
  meta?: Object;
  ogp?: Object;
  schema?: string;
}

const { title, meta: pageMeta, ogp: pageOgp } = Astro.props;

const meta: Object = {
  viewport: "width=device-width",
  "format-detection": "telephone=no",
  description: "ht-CODEは千葉県浦安市を拠点に活動するWebクリエイターです。中小企業のコーポレートサイトやランディングページなど、クライアントの活動を支えるWebサイト制作・開設・支援を行なっております",
  "twitter:card": "summary_large_image",
  // "google-site-verification": "",
  ...pageMeta,
};

const ogp: Object = {
  title: title + siteName,
  description: "ht-CODEは千葉県浦安市を拠点に活動するWebクリエイターです。中小企業のコーポレートサイトやランディングページなど、クライアントの活動を支えるWebサイト制作・開設・支援を行なっております",
  type: "website",
  image: siteUrl + ogpImage.src,
  url: siteUrl + "/",
  site_name: siteName,
  ...pageOgp,
};

const schema: string = JSON.stringify({
  "@context":"https://schema.org",
  "@type": "WebPage",
  "name": "ht-CODE",
  "url": siteUrl,  // 会社の公式ウェブサイトURLを追加してください
  "logo": favicon.large.src,  // 会社のロゴ画像のURLを追加してください
});
---

<!doctype html>
<html lang="ja">
  <head>
    <!-- Google tag (gtag.js) -->
    <script
      type="text/partytown"
      async src="https://www.googletagmanager.com/gtag/js?id=G-WZS5QVFYJW"
    ></script>
    <script type="text/partytown">
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());

      gtag('config', 'G-WZS5QVFYJW');
    </script>
    <meta charset="UTF-8" />
    <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
    <title>{title + siteName}</title>
    {
      // metaの出力
      Object.entries(meta).map(([key, value]) => value && value !== "" && <meta name={key} content={value} />)
    }
    {
      // ogpの出力
      Object.entries(ogp).map(([key, value]) => value && value !== "" && <meta property={"og:" + key} content={value} />)
    }
    <link rel="icon" type="image/webp+xml" href={favicon.default.src}/>
    <link rel="icon" href={favicon.large.src} sizes="192x192" />
    <link rel="apple-touch-icon" href={favicon.apple.src} />
    <script type="application/ld+json" set:html={schema} />
    <meta name="generator" content={Astro.generator} />
    <link rel="sitemap" href="https://ht-code.jp/sitemap-index.xml" />
  </head>
  <body id="top" class="font-light leading-relaxed underline-offset-2 bg-black text-white">
   <div id="global-wrapper"> 
    <slot />
  </div>
    {/*
    <div id="top-button">
      <a href="#top">
        <!-- <Picture
          src={{
            file: "img-top-button.svg",
            width: 50,
            height: 50,
          }}
          artDirectives={[
            {
              media: "(min-width: 768px)",
              file: "img-top-button-l.svg",
              width: 50,
              height: 50,
            },
          ]}
          loading="eager"
          alt="トップへ戻る"
        /> -->
      </a>
    </div>
    <div id="scroll-observer" aria-hidden="true" class="pointer-events-none invisible absolute top-0 h-dvh"></div> */}
  </body>
</html>
<style is:global>
  #global-wrapper {
    display: grid;
    grid-template-rows: auto 1fr auto;
    height: 100dvh;
  }
  * {
    min-inline-size: 0
  }
  /* #top-button {
    position: fixed;
    opacity: 0;
    transition: opacity 0.3s;
    right: 0;
    bottom: -10px;
    z-index: 10px;
    pointer-events: none;
  }
  @media (min-width: 768px) {
    #top-button {
      right: 20px;
      bottom: 20px;
    }
  }
  .is-show-button #top-button {
    display: block;
    opacity: 1;
    pointer-events: auto;
  } */
  svg {
    fill: currentColor;
  }
</style>
<script>
  import switchViewport from "@modules/fixViewport";
  import SmoothScroll from "@modules/SmoothScroll";
  import addAriaHiddenToBrTags from '@modules/addAriaHiddenToBrTags';
   
  // 最小ウインドウ幅
  const minWindowWidth: number = 375; 
  
  addAriaHiddenToBrTags();
  SmoothScroll.init();
  
  document.addEventListener("DOMContentLoaded", () => {
    switchViewport(minWindowWidth);
  });
  
  // リサイズ時に処理
  window.addEventListener('resize', () => {
    switchViewport(minWindowWidth);
  }, false);
  </script>
